{
    "wikidataConstraint": {
        "page1": "<p class='caption'>Tips</p><div><p>The query will allow contributors to automaticatically extract <span class='bold'>entities</span> and related <span class='bold'>data</span>, based on an input string, from Wikidata. Specify the information you would like to retrieve about entities after the <code>SELECT</code> clause (e.g.: <code>SELECT ?itemURI ?itemLabel</code>). You can optionally replace those labels with an asterysc to retrieve <span class='bold'>all</span> the variables expressed within the <code>WHERE</code> clause, which provides the basic graph pattern to match against the data graph.</p><p>Be careful: since a URI (<code>?item</code>) and a label (<code>?itemLabel</code>) are always required, you must always include them in your query.<br></p></div>",
        "page2": "<p class='caption'>Tips</p><div><p>The default query is structured as follows:</p><ul><li><p><span class='bold'>SELECT clause:</span> the query currently retrieves the URI (<code>?item</code>), the label (<code>?itemLabel</code>), and the description (<code>?itemDescription</code>) of each entity.</p></li><li><p><span class='bold'>WHERE clause:</span> The first two lines introduces two triple patterns. The first one looks for entities which are instances (<code>wdt:P31</code>) of human (<code>wd:Q5</code>), while the second one looks for entities whose occupation (<code>wdt:106</code>) is film director (<code>wd:Q2526255</code>).</p></li><li><p><span class='bold'>SERVICE clause:</span> thanks to the <code>SERVICE</code> clauses it is possible to activate the autosuggestion machanism based on a input string. You can set your preferred language for retrieved values by modifying the object of the language properties (\"en\" by default), while any other modification is strongly discouraged</p></li></ul></div>",
        "page3": "<p class='caption'>Tips</p><div><p>In the end, the best way to filter results from Wikidata is to modify the graph patterns right after the <code>WHERE</code> clause."
    },
    "catalogueConstraint":{
        "page1": "<p class='caption'>Tips</p><div><p>The query will allow contributors to automaticatically extract <span class='bold'>entities</span> and related <span class='bold'>data</span>, based on an input string, from Wikidata. Specify the information you would like to retrieve about entities after the <code>SELECT</code> clause (e.g.: <code>SELECT ?itemURI ?itemLabel</code>). You can optionally replace those labels with an asterysc to retrieve <span class='bold'>all</span> the variables expressed within the <code>WHERE</code> clause, which provides the basic graph pattern to match against the data graph.</p><p>Be careful: since a URI (<code>?item</code>) and a label (<code>?itemLabel</code>) are always required, you must always include them in your query.<br></p></div>",
        "page2": "<p class='caption'>Tips</p><div><p>The default query is structured as follows:</p><ul><li><p><span class='bold'>SELECT clause:</span> the query currently retrieves the URI (<code>?item</code>), the label (<code>?itemLabel</code>), and the description (<code>?itemDescription</code>) of each entity.</p></li><li><p><span class='bold'>WHERE clause:</span> The first two lines introduces two triple patterns. The first one looks for entities which are instances (<code>wdt:P31</code>) of human (<code>wd:Q5</code>), while the second one looks for entities whose occupation (<code>wdt:106</code>) is film director (<code>wd:Q2526255</code>).</p></li></ul></div>"
    }
}